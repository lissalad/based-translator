import Down from "../icons/down";
import "../images/chad.png";
import { useState, useRef } from "react";
import "../terms";

function Translator() {
  const terms = require("../terms.json");
  const termsTranslated = [];
  const [translation, setTranslation] = useState("");
  const messageRef = useRef();

  let translated = [];

  function onClick() {
    let input = messageRef.current.value.split(" ");
    translated = []

    // loop through words in input message
    for (let word = 0; word < input.length; word += 1) {
      //
      const lower = input[word].toLowerCase();
      // loop through term roots
      for (let term = 0; term < terms.length; term += 1) {
        //
        // checks if root is in the word
        if (lower.includes(terms[term].root)) {
          //
          // goes through that root's forms
          for (let form = 0; form < terms[term].word.length; form += 1) {
            if (lower === terms[term].word[form]) {
              input[word] = terms[term].alt[form];
              // trackTranslated(input[word]);
            } else {
            }
          }
        }
      }
      translated.push({
        word: input[word],
        translated: "text-rose-400"
      });
    }
    // for (let w = 0; w < input.length - 1; w += 1) {
    //   output += input[w];
    //   output += " ";
    // }
    // output += input[input.length - 1];

    // setTranslation(output);
    console.log(translated);

  // function plural(word) {
  //   console.log(word.slice(-3))
  //   if(word.slice(-3) === "ies" ) {
  //     console.log("this is plural");
  //   }
  //   if (word.charAt(word.length-1) === "s" ) {
  //     console.log("this is plurals");
  //   }
  // }

  // function trackTranslated(word) {
  //   if (!termsTranslated.includes(word)) {
  //     termsTranslated.push(word);
  //     console.log("word added to list");
  //     console.log(termsTranslated[0]);
  //   }
  // }

  const chunk = "flex flex-col items-start mb-5 mt-0";
  const box =
    "border-2 border-slate-200 h-fitc w-72 text-left p-2 min-h-[170px]";
  const label = "ml-4 mb-1";

  return (
    <div className="flex flex-col items-center">
      <section className="flex flex-col items-center w-full justify-evenly my-5">
        {/* message input */}
        <div className={chunk}>
          <label htmlFor="incel" className={label}>
            Incel
          </label>
          <textarea
            ref={messageRef}
            className={box}
            id="incel"
            name="incel"
            required
          />
        </div>

        <Down />

        {/* translation output */}
        <div className={chunk}>
          <p className={label}>Normie</p>
          {/* <p className={box}>{translation}</p> */}
          <p className={box}>{translated}</p>

        </div>

        {/* translate button */}
        <div className="">
          <button
            className="bg-slate-200 hover:bg-slate-300 hover:shadow p-2 rounded m-1"
            onClick={onClick}
          >
            Translate
          </button>
        </div>
      </section>

      {/* terms translated */}
      <section>
        <h1 className="text-2xl">Vocabulary</h1>
        <div className="bg-slate-100 rounded px-4 flex flex-row items-start py-4">
          <div className="flex flex-col w-fit">
            <div className="flex flex-row items-center justify-start space-x-3">
              <p className="text-2xl">Chad</p>
              <p>â†’</p>
              <h2>Attractive Man</h2>
            </div>
            <p className="text-xs text-left indent-6 py-1 mx-5">
              an attractive, successful, non-virgin man. women like chads. chad
              is the ideal man, opposite and often enemy of the incel
            </p>
          </div>

          <div className="">
            <img
              className="w-32"
              src={require("../images/chad.png")}
              alt="chad"
            />
          </div>
        </div>

        {/* */}
        {/* {console.log(termsTranslated)} */}
        {/* <TranslatedTerm word={termsTranslated[0]}/> */}
      </section>
    </div>
  );
}
export default Translator

function createMarkup(translatedWords) {
  let markup = "";
  let addition = ""
  for(let i=0; i<translatedWords.length; i+=1) {
    addition = "<span className='text-rose-400'" + translatedWords[0] + "</span>";
    markup += addition;
  }
  return markup;
}